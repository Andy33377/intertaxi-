"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { addOrder } from "@/lib/ordersLocal";

export default function OrderForm() {
  type Trip = {
    from?: string;
    to?: string;
    date?: string;
    time?: string;
    roundTrip?: boolean;
    returnDate?: string | null;
    returnTime?: string | null;
  };

  const router = useRouter();

  // üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  const [trip, setTrip] = useState<Trip>({});
  const [tripLoaded, setTripLoaded] = useState(false);

  useEffect(() => {
    try {
      const raw = localStorage.getItem("tripData");
      setTrip(raw ? JSON.parse(raw) : {});
    } catch {
      setTrip({});
    } finally {
      setTripLoaded(true);
    }
  }, []);

  // üîπ –õ–æ–∫–∞–ª—å–Ω—ã–π state
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [passengers, setPassengers] = useState(1);
  const [childSeat, setChildSeat] = useState(false);
  const [comment, setComment] = useState("");

  // üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ú–æ–ª–¥–æ–≤–∞: +373 XX XXX XXX)
  function formatMdPhone(raw: string) {
    let d = raw.replace(/\D/g, "");
    if (!d) return "";
    if (d.startsWith("00")) d = d.slice(2);
    if (d.startsWith("373")) d = d.slice(3);
    d = d.slice(0, 8);
    const p1 = d.slice(0, 2);
    const p2 = d.slice(2, 5);
    const p3 = d.slice(5, 8);
    return `+373${p1 ? " " + p1 : ""}${p2 ? " " + p2 : ""}${
      p3 ? " " + p3 : ""
    }`.trim();
  }

  function normalizePhoneForApi(formatted: string) {
    return formatted.replace(/\s+/g, "");
  }

  // üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // –ú–∏–Ω–∏-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!/^\+373\d{8}$/.test(normalizePhoneForApi(phone))) {
      alert("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +373 XX XXX XXX");
      return;
    }

    const payload = {
      ...trip,
      name: name.trim(),
      phone: normalizePhoneForApi(phone),
      passengers,
      childSeat,
      comment: comment.trim(),
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑:", payload);

    try {
      const res = await fetch("/api/orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", errorText);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: " + errorText);
        return;
      }

      const data = await res.json();
      console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", data);

      // üîπ –ü–∏—à–µ–º –∑–∞–∫–∞–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é (localStorage)
      try {
        addOrder({
          id: data.id,
          createdAt: data.createdAt,
          name: payload.name,
          phone: payload.phone,
          passengers: payload.passengers,
          childSeat: payload.childSeat,
          comment: payload.comment || null,
          from: payload.from!,
          to: payload.to!,
          date: payload.date!,
          time: payload.time!,
          roundTrip: payload.roundTrip,
          returnDate: (trip as any).returnDate ?? null,
          returnTime: (trip as any).returnTime ?? null,
        });
      } catch {
        /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */
      }

      // üîπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
      localStorage.removeItem("tripData");
      router.push("/thanks");
    } catch (err) {
      console.error("üö® –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –∫–æ–¥–∞:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ üòû");
    }
  };

  // üîπ –ü–æ–∫–∞ –≥—Ä—É–∑–∏–º localStorage
  if (!tripLoaded) {
    return <p className="text-center p-4">–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  }

  // üîπ –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ —Ñ–æ—Ä–º—É –≤—ã–±–æ—Ä–∞
  if (!trip.from || !trip.to || !trip.date || !trip.time) {
    return (
      <div className="max-w-md mx-auto p-4 text-center">
        <p>–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.</p>
        <button
          onClick={() => router.push("/#contacts")}
          className="mt-3 rounded-2xl bg-black text-white px-4 py-2"
        >
          –ö –≤—ã–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞
        </button>
      </div>
    );
  }

  // üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
  return (
    <form onSubmit={handleSubmit} className="space-y-6 max-w-md mx-auto p-4">
      <h2 className="text-xl font-bold text-center mb-4">
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
      </h2>

      {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ */}
      <div className="bg-gray-100 p-3 rounded-lg text-sm space-y-1">
        <p>
          <strong>–û—Ç–∫—É–¥–∞:</strong> {trip.from || "‚Äî"}
        </p>
        <p>
          <strong>–ö—É–¥–∞:</strong> {trip.to || "‚Äî"}
        </p>
        <p>
          <strong>–î–∞—Ç–∞:</strong> {trip.date || "‚Äî"}
        </p>
        <p>
          <strong>–í—Ä–µ–º—è:</strong> {trip.time || "‚Äî"}
        </p>
        {trip.roundTrip && (
          <>
            <p>
              <strong>–û–±—Ä–∞—Ç–Ω–∞—è –¥–∞—Ç–∞:</strong> {trip.returnDate || "‚Äî"}
            </p>
            <p>
              <strong>–û–±—Ä–∞—Ç–Ω–æ–µ –≤—Ä–µ–º—è:</strong> {trip.returnTime || "‚Äî"}
            </p>
          </>
        )}
      </div>

      {/* –ò–º—è */}
      <div>
        <label className="block text-sm font-medium">–ò–º—è *</label>
        <input
          type="text"
          value={name}
          onChange={(e) =>
            setName(e.target.value.replace(/[^A-Za-z–ê-–Ø–∞-—è–Å—ë\s]/g, ""))
          }
          className="mt-1 w-full rounded-2xl border p-3"
          autoComplete="name"
          required
        />
      </div>

      {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
      <div>
        <label className="block text-sm font-medium">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
        <input
          type="tel"
          inputMode="tel"
          value={phone}
          onChange={(e) => setPhone(formatMdPhone(e.target.value))}
          className="mt-1 w-full rounded-2xl border p-3"
          placeholder="+373 77 951 963"
          autoComplete="tel"
          maxLength={16}
          required
        />
        <p className="mt-1 text-xs text-slate-500">–§–æ—Ä–º–∞—Ç: +373 XX XXX XXX</p>
      </div>

      {/* –ü–∞—Å—Å–∞–∂–∏—Ä—ã */}
      <div>
        <label className="block text-sm font-medium">–ü–∞—Å—Å–∞–∂–∏—Ä—ã</label>
        <div className="flex items-center gap-2 mt-2">
          <button
            type="button"
            onClick={() => setPassengers((p) => Math.max(1, p - 1))}
            className="px-3 py-2 rounded-2xl border"
            aria-label="–£–º–µ–Ω—å—à–∏—Ç—å"
          >
            ‚àí
          </button>
          <input
            type="number"
            inputMode="numeric"
            className="w-20 text-center rounded-2xl border p-3"
            value={passengers}
            min={1}
            max={4}
            step={1}
            onChange={(e) => {
              const n = parseInt(e.target.value.replace(/^0+/, "") || "0", 10);
              if (Number.isNaN(n)) return;
              setPassengers(Math.max(1, Math.min(4, n)));
            }}
          />
          <button
            type="button"
            onClick={() => setPassengers((p) => Math.min(4, p + 1))}
            className="px-3 py-2 rounded-2xl border"
            aria-label="–£–≤–µ–ª–∏—á–∏—Ç—å"
          >
            +
          </button>
        </div>
      </div>

      {/* –î–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ */}
      <label className="flex items-center gap-2">
        <input
          type="checkbox"
          checked={childSeat}
          onChange={(e) => setChildSeat(e.target.checked)}
        />
        –î–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ
      </label>

      {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
      <div>
        <label className="block text-sm font-medium">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
        <textarea
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          className="mt-1 w-full rounded-2xl border p-3"
          rows={3}
          placeholder="–ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–µ–∑–¥–∫–µ"
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ */}
      <button
        type="submit"
        className="w-full h-14 rounded-2xl bg-black text-white text-lg font-semibold hover:bg-emerald-700"
      >
        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
      </button>
    </form>
  );
}
